package seedu.duke.commands;

import seedu.duke.Inventory;
import seedu.duke.Item;
import seedu.duke.Ui;
import seedu.duke.exceptions.EditErrorException;

import java.util.ArrayList;

public class EditCommand extends Command {

    private String[] editInfo;

    public EditCommand(Inventory inventory, String[] editInfo) {
        super(inventory);
        this.editInfo = editInfo;
    }

    /**
     * Searches the Hashmap to obtain the item required to be interacted with by the user.
     *
     * @param editInfo The array of strings that contain the user inputs.
     * @return Returns the variable of type "Item", which is the item in question to be interacted with by the user.
     * @throws EditErrorException Exception related to all errors generated by the edit command.
     */
    private Item retrieveItemFromHashMap(final String[] editInfo) throws EditErrorException {
        String upcCode = editInfo[0].replaceFirst("upc/", "");
        if (!upcCodes.containsKey(upcCode)) {
            throw new EditErrorException();
        }
        Item selectedItem = upcCodes.get(upcCode);
        return selectedItem;
    }

    /**
     * Based on the user input, the appropriate attribute (Price, Quantity, Name etc.) of the item will be targeted
     * and subsequently edited to the user's respective input.
     *
     * @param item The target item in the ArrayList in which the user wants to edit.
     * @param data The user input which contains the information to be used to update the item attributes.
     */
    private void updateItemInfo(final Item item, final String data) {
        if (data.contains("n/")) {
            String newName = data.replaceFirst("n/", "");
            item.setName(newName);
        } else if (data.contains("qty/")) {
            String updatedQuantity = data.replaceFirst("qty/", "");
            Integer newQuantity = Integer.valueOf(updatedQuantity);
            item.setQuantity(newQuantity);
        } else if (data.contains("p/")) {
            String updatedPrice = data.replaceFirst("p/", "");
            Double newPrice = Double.valueOf(updatedPrice);
            item.setPrice(newPrice);
        } else {
            Ui.printInvalidEditCommand();
        }
    }

    /**
     * Executes the Edit Command that searches for the item in the ArrayList and changes the item attributes according
     * to the wishes of the user.
     */
    @Override
    public void run() {
        try {
            Item updatedItem = retrieveItemFromHashMap(editInfo);
            Item oldItem = new Item(updatedItem.getName(), updatedItem.getUpc(), updatedItem.getQuantity().toString(),
                    updatedItem.getPrice().toString());
            for (int data = 1; data < editInfo.length; data += 1) {
                updateItemInfo(updatedItem, editInfo[data]);
            }
            String oldItemName = oldItem.getName().toLowerCase();
            String newItemName = updatedItem.getName().toLowerCase();
            if (!oldItemName.equals(newItemName) && itemNameHash.get(oldItemName).size() == 1) {
                itemNameHash.remove(oldItemName);
                itemsTrie.remove(oldItemName);
                ArrayList<Item> newItemArrayList = new ArrayList<>();
                newItemArrayList.add(updatedItem);
                itemNameHash.put(newItemName, newItemArrayList);
            } else {
                itemNameHash.get(oldItemName).remove(oldItem);
                if (!itemNameHash.containsKey(newItemName)) {
                    itemNameHash.put(newItemName, new ArrayList<Item>());
                }
                itemNameHash.get(newItemName).add(updatedItem);
            }
            itemsTrie.add(newItemName);
            upcCodes.remove(oldItem.getUpc());
            upcCodes.put(updatedItem.getUpc(), updatedItem);
            Ui.printEditDetails(oldItem, updatedItem);
        } catch (EditErrorException eee) {
            Ui.printItemNotFound();
        }

    }
}
