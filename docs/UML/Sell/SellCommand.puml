@startuml
'https://plantuml.com/sequence-diagram

participant ":SellParser"
activate ":SellParser"
":SellParser" -> ":SellCommand": run()
activate ":SellCommand"
":SellCommand"->":SellCommand": sellItem()
activate ":SellCommand"
ref over ":SellCommand": Retrieve Item from \n Hashmap and keep \n track of previous Quantity Value.
":SellCommand" -> ":SellCommand": checkSellCommandLength()
activate ":SellCommand"

alt Command Length != 2
ref over ":SellCommand": Handle MissingParameters \n Exception
end


activate ":SellCommand"
":SellCommand" --> ":SellCommand"
deactivate ":SellCommand"
":SellCommand" -> ":SellCommand": updateItemQuantity()
activate ":SellCommand"
":SellCommand" -> ":SellCommand": handleUserSellCommands()
activate ":SellCommand"
alt Quantity Deducted > 0 && Quantity Deducted < Current Quantity
ref over ":SellCommand"
Update the Quantity of Item if user input is valid
end
else Quantity Deducted > Current Quantity || Quantity Deducted <= 0
ref over ":SellCommand": Handle SellErrorException
end
":SellCommand" --> ":SellCommand"
deactivate ":SellCommand"
":SellCommand" --> ":SellCommand"
deactivate ":SellCommand"
":SellCommand" --> ":SellCommand"
deactivate ":SellCommand"

ref over ":SellCommand": Update Item Hashmap and \n Tree
alt Valid Inputs
":SellCommand" -> UI: printSellDetails()
activate UI
UI-->":SellCommand"
deactivate UI
":SellCommand" --> ":SellParser"
else Item Does Not Exist
":SellCommand" -> UI: printItemNotFound()
activate UI
UI-->":SellCommand"
deactivate UI
":SellCommand" --> ":SellParser"
else Missing Input Parameters
":SellCommand" -> UI: printInvalidSellCommand()
activate UI
UI-->":SellCommand"
deactivate UI
":SellCommand" --> ":SellParser"
else Invalid Input Parameters
":SellCommand" -> UI: printInvalidDeductQuantityInput()
activate UI
UI-->":SellCommand"
deactivate UI
":SellCommand" --> ":SellParser"
end
destroy UI
destroy ":SellCommand"
@enduml